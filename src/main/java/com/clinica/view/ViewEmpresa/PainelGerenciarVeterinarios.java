package com.clinica.view.ViewEmpresa;

import com.clinica.command.AddVeterinarioCommand;
import com.clinica.command.Command;
import com.clinica.command.DeleteVeterinarioCommand;
import com.clinica.command.UndoManager;
import com.clinica.command.UpdateVeterinarioCommand;
import com.clinica.facade.ClinicaFacade;
import com.clinica.model.Veterinario;
import com.clinica.observer.DataObserver;
import com.clinica.observer.DataType;
import java.awt.*;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

// Implementa a interface DataObserver
public class PainelGerenciarVeterinarios extends JPanel implements DataObserver {
    private JTable tabela;
    private DefaultTableModel modelo;
    private JScrollPane scrollPane;
    private ClinicaFacade facade = ClinicaFacade.getInstance();
    private JButton btnAdicionar, btnEditar, btnExcluir, btnDesfazer; // Bot√£o Desfazer adicionado
    private UndoManager undoManager; // Inst√¢ncia do gerenciador de Undo/Redo
    private Timer undoButtonTimer; // Timer para atualizar estado do bot√£o Undo

    // Construtor - Idealmente receberia a inst√¢ncia global do UndoManager
    public PainelGerenciarVeterinarios(/* UndoManager globalUndoManager */) {
        // Se um UndoManager global for passado, use-o. Sen√£o, crie um local.
        // if (globalUndoManager != null) {
        //     this.undoManager = globalUndoManager;
        // } else {
             System.out.println("WARN: Criando UndoManager local para PainelGerenciarVeterinarios.");
             this.undoManager = new UndoManager(); // Cria inst√¢ncia local (Undo s√≥ funciona neste painel)
        // }

        setLayout(new BorderLayout(10, 10));
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // --- UI ---
        JLabel titulo = new JLabel("ü©∫ Gerenciamento de Veterin√°rios", SwingConstants.CENTER);
        titulo.setFont(new Font("Segoe UI", Font.BOLD, 18));
        add(titulo, BorderLayout.NORTH);

        modelo = new DefaultTableModel(
                new String[]{"ID", "Nome", "Email", "Telefone", "CPF", "CRMV", "Especialidade"}, 0) {
            @Override public boolean isCellEditable(int r, int c) { return false; } // C√©lulas n√£o edit√°veis
        };
        tabela = new JTable(modelo);
        tabela.setRowHeight(24);
        tabela.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        tabela.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));
        tabela.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); // Apenas uma linha selecion√°vel
        scrollPane = new JScrollPane(tabela);
        add(scrollPane, BorderLayout.CENTER);

        // --- Painel de Bot√µes ---
        JPanel painelBotoes = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        btnAdicionar = new JButton("‚ûï Adicionar");
        btnEditar = new JButton("‚úèÔ∏è Editar");
        btnExcluir = new JButton("üóëÔ∏è Excluir");
        btnDesfazer = new JButton("‚Ü©Ô∏è Desfazer"); // Bot√£o Desfazer
        painelBotoes.add(btnAdicionar);
        painelBotoes.add(btnEditar);
        painelBotoes.add(btnExcluir);
        painelBotoes.add(btnDesfazer); // Adiciona o bot√£o Desfazer √† UI
        add(painelBotoes, BorderLayout.SOUTH);

        // --- Listeners ---
        btnAdicionar.addActionListener(e -> adicionarVeterinario()); // Chama m√©todo adaptado
        btnEditar.addActionListener(e -> editarVeterinario());     // Chama m√©todo adaptado
        btnExcluir.addActionListener(e -> excluirVeterinario());   // Chama m√©todo adaptado
        btnDesfazer.addActionListener(e -> desfazAcao());        // Chama o m√©todo de desfazer

        // --- Inicializa√ß√£o ---
        carregarVeterinarios();      // Carrega dados iniciais da tabela
        configurarTimerBotaoUndo(); // Configura e inicia o timer para o bot√£o Desfazer

        // --- REGISTRAR COMO OBSERVER ---
        facade.removeObserver(this); // Remove inst√¢ncias anteriores (se houver)
        facade.addObserver(this);    // Adiciona esta inst√¢ncia como observer
        // -----------------------------
    }

    // M√©todo para configurar o Timer que atualiza o bot√£o Undo
    private void configurarTimerBotaoUndo() {
        // Cria um Timer que dispara a cada 500ms
        undoButtonTimer = new Timer(500, e -> atualizarEstadoBotaoUndo());
        undoButtonTimer.setRepeats(true); // Faz o timer repetir
        undoButtonTimer.start(); // Inicia o timer
        atualizarEstadoBotaoUndo(); // Atualiza o estado inicial do bot√£o
        System.out.println("Timer do bot√£o Undo iniciado para: " + this.getClass().getSimpleName());
    }

    // Atualiza o estado (habilitado/desabilitado) do bot√£o Desfazer
    private void atualizarEstadoBotaoUndo() {
        if (btnDesfazer != null && undoManager != null) {
             // Habilita o bot√£o se o UndoManager indicar que pode desfazer
            btnDesfazer.setEnabled(undoManager.canUndo());
        }
        // System.out.println("Timer check: canUndo = " + undoManager.canUndo()); // Log para debug
    }

    // --- Implementa√ß√£o do M√©todo update() da Interface DataObserver ---
    @Override
    public void update(DataType typeChanged) {
        System.out.println("PainelGerenciarVeterinarios notificado sobre: " + typeChanged + " | Thread: " + Thread.currentThread().getName()); // Log
        // Recarrega a lista de veterin√°rios se os dados de VETERINARIO mudaram
        if (typeChanged == DataType.VETERINARIO) {
            System.out.println("-> Recarregando veterin√°rios...");
            carregarVeterinarios(); // Atualiza a tabela
        }
        // √â importante atualizar o estado do bot√£o Desfazer ap√≥s qualquer mudan√ßa
        // relevante, mas o Timer j√° faz isso periodicamente.
        // Se quiser atualiza√ß√£o imediata (pode ser redundante):
        // SwingUtilities.invokeLater(this::atualizarEstadoBotaoUndo);
    }

    // --- M√©todos de A√ß√£o (Adaptados para usar Command e UndoManager) ---

    private void adicionarVeterinario() {
        VeterinarioFormDialog dialog = new VeterinarioFormDialog((JFrame) SwingUtilities.getWindowAncestor(this), null);
        dialog.setVisible(true);
        if (dialog.foiSalvo()) {
            try {
                Veterinario novoVeterinario = dialog.getVeterinario();
                // 1. Cria o Comando de Adi√ß√£o
                Command command = new AddVeterinarioCommand(facade, novoVeterinario);
                // 2. Executa o Comando atrav√©s do Gerenciador de Undo
                undoManager.executeCommand(command);
                JOptionPane.showMessageDialog(this, "Veterin√°rio adicionado!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                // Trata erros durante a execu√ß√£o do comando (valida√ß√£o, etc.)
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Erro ao adicionar veterin√°rio:\n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            } finally {
                // Garante a atualiza√ß√£o do bot√£o mesmo se ocorrer erro na execu√ß√£o do comando
                 atualizarEstadoBotaoUndo();
            }
        }
    }

    private void editarVeterinario() {
        int linha = tabela.getSelectedRow();
        if (linha >= 0) {
            int id = (int) modelo.getValueAt(linha, 0);
            Veterinario existente; // N√£o precisa inicializar aqui
            try {
                // Busca o estado ATUAL antes de abrir o di√°logo de edi√ß√£o
                existente = facade.buscarVeterinarioPorId(id);
                 if (existente == null) {
                     JOptionPane.showMessageDialog(this, "Veterin√°rio (ID: " + id + ") n√£o encontrado. A lista pode estar desatualizada.", "Erro", JOptionPane.ERROR_MESSAGE);
                     return;
                 }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Erro ao buscar veterin√°rio para edi√ß√£o:\n" + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Mostra o di√°logo preenchido com os dados existentes
            VeterinarioFormDialog dialog = new VeterinarioFormDialog((JFrame) SwingUtilities.getWindowAncestor(this), existente);
            dialog.setVisible(true);

            if (dialog.foiSalvo()) {
                try {
                    // Pega o estado NOVO (modificado) do di√°logo
                    Veterinario vetAtualizado = dialog.getVeterinario();
                    // 1. Cria o Comando de Atualiza√ß√£o (passa ID e o estado novo)
                    Command command = new UpdateVeterinarioCommand(facade, id, vetAtualizado);
                    // 2. Executa o Comando atrav√©s do Gerenciador
                    undoManager.executeCommand(command);
                    JOptionPane.showMessageDialog(this, "Veterin√°rio atualizado!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception ex) {
                    // Trata erros durante a execu√ß√£o do comando
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Erro ao atualizar veterin√°rio:\n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                } finally {
                     atualizarEstadoBotaoUndo();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um veterin√°rio na tabela para editar.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void excluirVeterinario() {
        int linha = tabela.getSelectedRow();
        if (linha >= 0) {
            int id = (int) modelo.getValueAt(linha, 0);
            // Confirma√ß√£o antes de excluir
            String nomeVet = (String) modelo.getValueAt(linha, 1); // Pega o nome da tabela para a mensagem
            int confirm = JOptionPane.showConfirmDialog(this,
                    "Excluir permanentemente o veterin√°rio '" + nomeVet + "' (ID: " + id + ")?",
                    "Confirmar Exclus√£o",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);

            if (confirm == JOptionPane.YES_OPTION) {
                 try {
                    // 1. Cria o Comando de Exclus√£o (passa o ID)
                    Command command = new DeleteVeterinarioCommand(facade, id);
                    // 2. Executa o Comando atrav√©s do Gerenciador
                    // O comando tentar√° buscar o vet antes de chamar facade.removerVeterinario
                    undoManager.executeCommand(command);
                    JOptionPane.showMessageDialog(this, "Veterin√°rio exclu√≠do!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                 } catch (Exception e) {
                    // Trata erros (ex: vet n√£o encontrado, restri√ß√µes de exclus√£o na facade)
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Erro ao excluir veterin√°rio:\n" + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                 } finally {
                      atualizarEstadoBotaoUndo();
                 }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um veterin√°rio na tabela para excluir.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }

    // --- M√©todo para chamar o UndoManager ---
    private void desfazAcao() {
        System.out.println("Bot√£o Desfazer pressionado."); // Log
        try {
            undoManager.undo(); // Chama o m√©todo undo do gerenciador
            // A tabela ser√° atualizada automaticamente via Observer
            JOptionPane.showMessageDialog(this, "√öltima a√ß√£o desfeita!", "Desfazer", JOptionPane.INFORMATION_MESSAGE);
        } catch (IllegalStateException ex) { // Exce√ß√£o comum se a pilha estiver vazia
             JOptionPane.showMessageDialog(this, "Nada para desfazer.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) { // Outras exce√ß√µes durante o undo() do comando
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao desfazer a√ß√£o:\n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } finally {
             atualizarEstadoBotaoUndo(); // Atualiza o bot√£o ap√≥s tentar desfazer
        }
    }

    // --- M√©todo para Carregar/Atualizar Tabela (sem mudan√ßas na l√≥gica interna) ---
    private void carregarVeterinarios() {
        // Guarda a sele√ß√£o atual para tentar restaurar depois
        int selectedRow = tabela.getSelectedRow();
        Object selectedId = null;
        if (selectedRow >= 0) {
             try {
                 selectedId = modelo.getValueAt(selectedRow, 0);
             } catch (ArrayIndexOutOfBoundsException e) { selectedRow = -1; /* Linha sumiu */ }
        }

        modelo.setRowCount(0); // Limpa a tabela
        try {
            List<Veterinario> vets = facade.listarTodosVeterinarios(); // Busca via Facade
            if (vets != null) {
                for (Veterinario vet : vets) {
                    modelo.addRow(new Object[]{
                            vet.getId(),
                            vet.getNome(),
                            vet.getEmail(),
                            vet.getTelefone(),
                            vet.getCpf(),
                            vet.getCrmv(),
                            vet.getEspecialidade()
                    });
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao carregar veterin√°rios: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
        modelo.fireTableDataChanged(); // Notifica a tabela sobre a mudan√ßa de dados

        // Tenta restaurar a sele√ß√£o
        if (selectedId != null) {
            for (int i = 0; i < modelo.getRowCount(); i++) {
                if (selectedId.equals(modelo.getValueAt(i, 0))) {
                    tabela.setRowSelectionInterval(i, i);
                    break;
                }
            }
        }
        // Se n√£o restaurou, garante que n√£o h√° linha selecionada
        if (tabela.getSelectedRow() < 0) {
             // Limpar detalhes ou a√ß√µes dependentes da sele√ß√£o aqui, se houver
        }
    }

     // --- Limpeza ao remover o painel (IMPORTANTE para parar o Timer) ---
     @Override
     public void removeNotify() {
         super.removeNotify();
         // Para o Timer quando o painel n√£o estiver mais vis√≠vel/ativo
         if (undoButtonTimer != null && undoButtonTimer.isRunning()) {
             undoButtonTimer.stop();
             System.out.println("Timer do bot√£o Undo parado para: " + this.getClass().getSimpleName());
         }
         // √â uma boa pr√°tica remover o observer quando o componente √© descartado
         facade.removeObserver(this);
         System.out.println("Observer removido para: " + this.getClass().getSimpleName());
     }

} // Fim da classe PainelGerenciarVeterinarios